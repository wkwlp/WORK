## 定义工作流程的名字
#name: PushPlus.yml Event Reminder
#
## 规定工作流程何时触发
#on:
#  # 定时任务触发器，基于cron表达式
#  schedule:
#    # 格式：分钟 小时 日期 月份 星期几
#    # 每天北京时间中午11点（UTC时间早上3点）触发此工作流
#    - cron: '00 03 * * *'
#  # 允许手动触发工作流
#  workflow_dispatch:
#
## 定义一个任务
#jobs:
#  # 任务名称为build
#  build:
#    # 指定此任务将在哪个操作系统上运行，这里选择了最新的Ubuntu镜像
#    runs-on: ubuntu-latest
#
#    # 任务包含的具体步骤
#    steps:
#      # 第一步：检出代码
#    - name: Checkout code
#      # 使用GitHub Actions提供的action来检出代码到工作区
#      uses: actions/checkout@v3
#
#      # 第二步：设置Python环境
#    - name: Set up Python
#      # 使用GitHub Actions提供的setup-python action来安装Python环境
#      uses: actions/setup-python@v4
#      with:
#        # 使用最新的Python 3版本
#        python-version: '3.x'
#
#    - name: Install dependencies
#      # 安装脚本所需的Python依赖包
#      run: |
#        # 升级pip到最新版本
#        python -m pip install --upgrade pip
#        # 安装所有依赖项，假设依赖项在项目的根目录下的requirements.txt中列出
#        if [ -f requirements.txt ]; then
#          pip install -r requirements.txt
#        else
#          # 如果没有 requirements.txt 文件，则提示用户并停止
#          echo "Error: 未找到 requirements.txt 文件"
#          exit 1
#        fi
#    - name: Set up PYTHONPATH
#        # 确保项目根目录在PYTHONPATH中，以便能够找到pushplus包
#      run: echo "PYTHONPATH=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
#
#    - name: Run Event reminder script
#      # 设置环境变量，并运行事件提醒脚本
#      env:
#        # 引用存储在GIT仓库中的密钥作为环境变量
#        # PUSHPLUS_TOKEN为密钥名称，请根据实际情况修改
#        PUSHPLUS_TOKEN: ${{ secrets.PUSHPLUS_TOKEN }}
#        CalendarAPI_KEY: ${{ secrets.CalendarAPI_KEY }}
#        PUSHPLUS_GROUP_TOPIC: ${{ secrets.PUSHPLUS_GROUP_TOPIC }}
#      # 运行指定的Python脚本来执行事件提醒逻辑
#      run: |
#        # 执行事件提醒脚本
#        python pushplus/Event_Reminder/Event.py